@page "/Dashboard"
@using HotelPriceScout.Data.Interface
@using DataAccessLibrary
@using HotelPriceScout.Data.Model
@inject Dashboard Dashboard
@inject SqliteDataAccess _db

<div class="row col-md-7">
    <h1 style="width:350px;">@Dashboard.MonthName @Dashboard.Year</h1>
    @if (Dashboard.MonthsAway > 0)
    {
        <button type="button" class="btn btn-default btn-lg" @onclick='() =>{OnClickUpdate("Previous");}'>
            <span class="oi oi-arrow-thick-left" style="font-size:30px"></span>
        </button> 
    }
    else
    {
        <button id="BtnDisable" type="button" class="btn btn-default btn-lg" disabled>
            <span class="oi oi-arrow-thick-left" style="font-size:30px"></span>
        </button>
    }
    @if (Dashboard.MonthsAway < 3)
    {
        <button type="button" class="btn btn-default btn-lg" @onclick='() =>{OnClickUpdate("Next");}'>
            <span class="oi oi-arrow-thick-right" style="font-size:30px"></span>
        </button> 
    }
    else
    {
        <button id="BtnDisable" type="button" class="btn btn-default btn-lg" disabled>
            <span class="oi oi-arrow-thick-right" style="font-size:30px"></span>
        </button>
    }
</div>

<div class="row col-md-7">
    <div class="col-md-4">
        <SfDropDownList Width="200px" TItem="NumberOfAdults" TValue="int" @bind-value="adultsPicked" DataSource="@Adults">
            <DropDownListFieldSettings Text="Text" Value="Adults"></DropDownListFieldSettings>
            <DropDownListEvents TValue="int" TItem="NumberOfAdults" ValueChange='() => {OnClickUpdate("Update");}'></DropDownListEvents>
        </SfDropDownList>
    </div>
    <div class="col-lg-6" style="padding:0;">
        <SfMultiSelect TValue="List<string>" @bind-Value="selectedHotels" AllowFiltering="true" TItem="string" Mode="@VisualMode.CheckBox" Placeholder="Select hotels" DataSource="listOfSelectedHotels" ShowSelectAll="true"
                       EnableSelectionOrder="false" FilterBarPlaceholder="Search hotels" EnableGroupCheckBox="true" PopupHeight="350px">
            <MultiSelectEvents TValue="List<string>" TItem="string" ValueChange='() => {OnClickUpdate("update Hotel");}'></MultiSelectEvents>
        </SfMultiSelect>
    </div>
</div>

<div class="row">
    <div class="col-md-8 ">
        <table class="table table-bordered col calendar">
            <thead>
                <tr>
                    <th style="width:14%"> Monday</th>
                    <th style="width:14%"> Tuesday</th>
                    <th style="width:14%"> Wednesday</th>
                    <th style="width:14%"> Thursday</th>
                    <th style="width:14%"> Friday</th>
                    <th style="width:14%"> Saturday</th>
                    <th style="width:14%"> Sunday</th>

                </tr>
            </thead>
            <tbody>
                <tr class="rows">
                    @for (int i = 0; i < Dashboard.NumDummyColumn - 1; i++)
                    {
                        <td></td>
                    }
                    @for (int i = 1; i + Dashboard.NumDummyColumn - 1 <= 7; i++)
                     {
                            int day = i;
                            DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                            marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                            marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                            kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                        <td class="@(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "")" style="height:100px;" tabindex="0" @onclick="@(() => { Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                            <div style="font-weight: 700; font-size: 24px; @(marketPrice == 0 ? "opacity: 0.3;" : "")">@i <span class="@(marketPrice == 0 ? "d-none" : "") @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span></div>
                            <div class="@(marketPrice == 0 ? "d-none" : "")">
                                <div style="text-align: right; font-size: small; font-weight: 700" class="@(Dashboard.ChangeTextColorBasedOnMargin(marketPrice,kompasPrice))">You: <span>@(decimal.ToInt32(kompasPrice)),-</span></div>
                                <div style="font-weight: 700; text-align: right; font-size: small; opacity: 0.8;">
                                    Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                                </div>
                            </div>
                        </td>
                     }
                </tr>

                @for (int i = 8 - Dashboard.NumDummyColumn + 1; i <= Dashboard.MonthEnd.Day; i += 7)
                {
                    <tr class="clik rows">
                        @for (int j = 0; j < 7; j++)
                        {
                            @if (i + j <= Dashboard.MonthEnd.Day)
                                {
                                    int day = i + j;
                                    DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                                    marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                                    marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                                    kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                        <td class="@(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "")" style="height: 100px;" tabindex="0" @onclick="@(() => { Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                            <div style="font-weight: 700; font-size: 24px; @(marketPrice == 0 ? "opacity: 0.3;" : "")">@(i + j) <span class="@(marketPrice == 0 ? "d-none" : "") @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span></div>
                                    <div class="@(marketPrice == 0 ? "d-none" : "")">
                                        <div style="text-align: right; font-size: small; font-weight: 700" class="@(Dashboard.ChangeTextColorBasedOnMargin(marketPrice, kompasPrice))">
                                            You: <span>@(decimal.ToInt32(kompasPrice)),-</span>
                                        </div>
                                        <div style="font-weight: 700; text-align: right; font-size: small; opacity: 0.8;">
                                            Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                                        </div>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>


    @if (Dashboard.DayClicked != 0)
    {
        Dashboard.GenerateThermometer(Dashboard.DayClicked, monthData, marketPriceList);marketPriceList.Clear();
        <div class="@(Dashboard.DetermineAnimation(Dashboard.DayClicked, Dashboard.CheckForAlternateClick, Dashboard.TempAniDate)) col-md-4 table-borderless">
            <h1 style="height:fit-content; text-align: center; padding-bottom:25px">@Dashboard.ShowCurrentDayAsString()</h1>
            <div class="row col d-flex justify-content-center">
                <!-- outer layer-->
                @if (Dashboard.PriceList == null)
                {
                    <div><p>Loading data</p></div>// <--- checks if thermometer is ready yet
                }
                else
                {
                    <table class="table table-borderless noHover" style="max-width:90%">
                        @foreach (PriceModel item in Dashboard.PriceList)
                        {
                            if (decimal.ToInt32(item.Price) == decimal.ToInt32(Dashboard.MarketPriceItem.Price))
                            {
                                <tr>
                                    <td class="col text-right"> @item.HotelName <span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="table-info">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price > Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right">@item.HotelName <span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="col @(Dashboard.PriceList.First()==item ? "table-danger rounded-top":"table-danger")">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price < Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right">@item.HotelName <span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="@(Dashboard.PriceList.Last()==item ? "table-success rounded-bottom":"table-success")">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="col text-right"> @Dashboard.MarketPriceItem.HotelName <span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="table-info">@(decimal.ToInt32(Dashboard.MarketPriceItem.Price)),-</td>
                                </tr>
                            }
                        }
                    </table>
                    Dashboard.TempAniDate = Dashboard.DayClicked;
                }
            </div>
        </div>
    }
</div>


@code
{
    decimal marketPrice;
    List<PriceModel> marketPriceList = new();
    decimal kompasPrice;
    private int adultsPicked = 1;
    private List<string> selectedHotels;

    public class NumberOfAdults
    {
        public int Adults { get; set; }
        public string Text { get; set; }
    }

    private List<NumberOfAdults> Adults = new List<NumberOfAdults>()
    {
            new NumberOfAdults(){ Adults= 1, Text= "1 adult" },
            new NumberOfAdults(){ Adults= 2, Text= "2 adults" },
            new NumberOfAdults(){ Adults= 4, Text= "4 adults" },
    };

    IEnumerable<string> listOfHotels = Enumerable.Empty<string>();
    List<string> listOfSelectedHotels;


    IEnumerable<PriceModel> monthData;
    IEnumerable<PriceModel> monthMarketData;
    IEnumerable<PriceModel> monthKompasPrices;

    //Needs to be here, Can not be moved to Dashboard
    // As we can not call variables made in this scope.
    private async void OnClickUpdate(string s)
    {
        switch (s)
        {
            case "Next":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway++;
                Dashboard.CreateMonth();
                Dashboard.NextMonth();
                break;
            case "Previous":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway--;
                Dashboard.CreateMonth();
                Dashboard.PreviousMonth();
                break;
            case "update Hotel":
                marketPriceList.Clear();
                break;
        }
        monthData = await Dashboard.RetrieveSelectDataFromDb(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, adultsPicked, "Select Prices", selectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, adultsPicked, "Kompas Prices");
    }

    protected override async Task OnInitializedAsync()
    {
        listOfHotels = await _db.LoadStaticHotelResources("total");//Loads list of hotels to the dropdown
        listOfSelectedHotels = listOfHotels.ToList();
        //Adds the 2 extra options
        listOfSelectedHotels.Add("Local");
        listOfSelectedHotels.Add("No budget");

        Program.ScoutSharedService.Scout.RunComparator("dashboard");

        foreach (BookingSite bookingSite in Program.ScoutSharedService.Scout.BookingSites)
        {
            bookingSite.DataScraper.SendMissingDataWarning += Dashboard.UpdateUiMissingDataWarning;
        }

        monthData = await Dashboard.RetrieveSelectDataFromDb(Dashboard.ToDay.Date,Dashboard.LastDayOfMonth.Date, adultsPicked, "Select Prices", selectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, adultsPicked, "Kompas Prices");

        Dashboard.CreateMonth();
    }
 }