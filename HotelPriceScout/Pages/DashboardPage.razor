@page "/Dashboard"
@using HotelPriceScout.Data.Interface
@using DataAccessLibrary
@using HotelPriceScout.Data.Model
@inject IDashboard Dashboard
@inject ISqliteDataAccess _db

<div class="row topLayer">
    <div class="col-md-12 d-inline-flex topLayer">
        <h1 class="noneselect H1MonthAndYear">@Dashboard.MonthName @Dashboard.Year</h1>
        @if (Dashboard.MonthsAway > 0)
        {
            <button type="button" id="previous-month-button" class="btn btn-default btn-lg topLayer" @onclick='() => { OnClickUpdate("Previous"); }'>
                <span class="ArrowSize oi oi-arrow-thick-left"></span>
            </button>
        }
        else
        {
            <button type="button" id="previous-month-button" class="btn btn-default btn-lg topLayer" disabled>
                <span class="ArrowSize oi oi-arrow-thick-left"></span>
            </button>
        }
        @if (Dashboard.MonthsAway < 3)
        {
            <button type="button" id="next-month-button" class="btn btn-default btn-lg topLayer" @onclick='() => { OnClickUpdate("Next"); }'>
                <span class="ArrowSize oi oi-arrow-thick-right"></span>
            </button>
        }
        else
        {
            <button type="button" id="next-month-button" class="btn btn-default btn-lg topLayer" disabled>
                <span class="ArrowSize oi oi-arrow-thick-right"></span>
            </button>
        }
        <div class="col-md-8 @(Dashboard.DetermineAnimation())">
            <h1 class="noneselect H1Date">@(Dashboard.DayClicked != 0 ? Dashboard.ShowCurrentDayAsString() : "")</h1>
        </div>
    </div>
</div>


<div class="noneselect row col-md-7 d-inline-flex topLayer">
    <div class="col-md-4">
        <select id="number-of-adults" class="form-control" @bind="adultsPicked" placeholder="1 adult" @onclick='() => OnClickUpdate("Update")'>
            <option value="1">1 adult</option>
            <option value="2">2 adults</option>
            <option value="4">4 adults</option>
        </select>
    </div>
    <div class="col-lg-6">
        <div class="dropdown" id="selected-hotels" data-toggle="tooltip"
        title="All hotels on the dropdown list are selected by default">
            <button class="btn dropbtn" id="selected-hotels-button" @onclick="()=>dropdown=!dropdown">Select hotels <span id="arrow" class="@(dropdown == true ? "oi oi-chevron-top" : "oi oi-chevron-bottom")"></span></button>
            <div class="dropdown-content @(dropdown == true ? "ontop" : "d-none")">
                <div class="bold HotelOptions @(Dashboard.SelectedHotels.Contains("All") ? "selected" : "")" @onclick='() => { Dashboard.SelectedHotelsChanged("All"); OnClickUpdate("update Hotel");}'>All</div>
                <div class="bold HotelOptions @(Dashboard.SelectedHotels.Contains("Local") ? "selected" : "")" @onclick='() => { Dashboard.SelectedHotelsChanged("Local"); OnClickUpdate("update Hotel");}'>Local</div>
                <div class="bold HotelOptions @(Dashboard.SelectedHotels.Contains("No budget") ? "selected" : "")" @onclick='() => { Dashboard.SelectedHotelsChanged("No budget"); OnClickUpdate("update Hotel");}'>No budget</div>
                @foreach (string hotel in Dashboard.ListOfHotels)
                {
                    <div class="HotelOptions @(Dashboard.SelectedHotels.Contains(hotel) ? "selected" : "")" @onclick='() => { Dashboard.SelectedHotelsChanged(hotel); OnClickUpdate("update Hotel");}'>@hotel</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="noneselect row">
    <div class="col-md-8 ">
        <table class="table table-bordered table-sm col calendar shadow bg-white">
            <thead>
            <tr>
                <th class="Weekdays"> Monday</th>
                <th class="Weekdays"> Tuesday</th>
                <th class="Weekdays"> Wednesday</th>
                <th class="Weekdays"> Thursday</th>
                <th class="Weekdays"> Friday</th>
                <th class="Weekdays"> Saturday</th>
                <th class="Weekdays"> Sunday</th>
            </tr>
            </thead>
            <tbody>
            <tr class="rows">
                @for (int i = 0; i < Dashboard.NumDummyColumn - 1; i++)
                {
                    <td></td>
                }
                @for (int i = 1; i + Dashboard.NumDummyColumn - 1 <= 7; i++)
                {
                    int day = i;
                    DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                    marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                    marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                    kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                    <td class="HeightOfTdFirstRow @(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "") @(Dashboard.DetermineFocus(day))"
                        @onclick="@(() => { Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                        <div class="DateAndArrow" style="@(marketPrice == 0 ? "opacity: 0.3;" : "")">
                            @i
                            <span class="@(marketPrice == 0 ? "d-none" : "") @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span>
                        </div>
                        <div class="@(marketPrice == 0 ? "d-none" : "")">
                            <div class="YouPrice @(Dashboard.ChangeTextColorBasedOnMargin(marketPrice, kompasPrice))">
                                You: <span>@(decimal.ToInt32(kompasPrice)),-</span>
                            </div>
                            <div class="MarketPrice">
                                Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                            </div>
                        </div>
                    </td>
                }
            </tr>

            @for (int i = 8 - Dashboard.NumDummyColumn + 1; i <= Dashboard.MonthEnd.Day; i += 7)
            {
                <tr class="rows">
                    @for (int j = 0; j < 7; j++)
                    {
                        @if (i + j <= Dashboard.MonthEnd.Day)
                        {
                            int day = i + j;
                            DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                            marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                            marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                            kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                            <td class="HeightOfTd @(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "") @(Dashboard.DetermineFocus(day))"
                                @onclick="@(() => {Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                                <div class="DateAndArrow" style="@(marketPrice == 0 ? "opacity: 0.3;" : "")">
                                    @(i + j)
                                    <span class="@(marketPrice == 0 ? "d-none" : "")
                                              @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span>
                                </div>
                                <div class="@(marketPrice == 0 ? "d-none" : "")">
                                    <div class="YouPrice @(Dashboard.ChangeTextColorBasedOnMargin(marketPrice, kompasPrice))">
                                        You: <span>@(decimal.ToInt32(kompasPrice)),-</span>
                                    </div>
                                    <div class="MarketPrice">
                                        Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                                    </div>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>

    @if (Dashboard.DayClicked != 0)
    {
        Dashboard.GenerateThermometer(monthData, marketPriceList);
        marketPriceList.Clear();
        <div class="@(Dashboard.DetermineAnimation()) col-md-4 table-borderless bottomLayer">
            <div class="row col d-flex justify-content-center">
                @if (Dashboard.PriceList == null)
                {
                    <div>
                        <p>Loading data</p>
                    </div> // <--- checks if thermometer is ready yet
                }
                else
                {
                    <table class="table table-sm table-borderless noHover shadow bg-white">
                        @foreach (PriceModel item in Dashboard.PriceList)
                        {
                            if (item.Price <= Dashboard.MarketPriceItem.Price + Dashboard.CurrentMargin(Dashboard.MarketPriceItem.Price) &&
                                item.Price >= Dashboard.MarketPriceItem.Price - Dashboard.CurrentMargin(Dashboard.MarketPriceItem.Price))
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Average Market Price" || item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-info text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price > Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="col table-danger text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price < Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-success text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="col text-right">
                                        @Dashboard.MarketPriceItem.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-info">@(decimal.ToInt32(Dashboard.MarketPriceItem.Price)),-</td>
                                </tr>
                            }
                        }
                    </table>
                    Dashboard.TempAniDate = Dashboard.DayClicked;
                }
            </div>
        </div>
    }
</div>

@if (Dashboard.BoolExceptionPopup)
{
    @foreach (var item in Dashboard.WarningMessages)
    {
        string[] ArrayOfWarnings = item.ConcatenatedWarningString.Split("|");
        <div @key="item" class="noneselect modal fade show d-block " id="@item"  role="dialog">
            <div class="modal-dialog modal-dialog-centered " role="document">
                <div class="modal-content shadow-lg">
                    <div class="modal-body"> <pre><span class="e-icons e-circle-info"></span>   <b>Warning!</b></pre>
                        <h6 class="modal-title boldFont" id="titleLabel">Data for the following hotels could not be collected from <b>@item.BookingSite</b>, please contact the system admin:</h6> 
                            @foreach( var s in ArrayOfWarnings ){<p>@s </p>}
                            <button @key="1" class="btn-remove col-6 offset-3" @onclick="() => RemoveCard(item)">Dismiss</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code
{
    private void RemoveCard(WarningMessage popup)
    {
        Dashboard.WarningMessages.Remove(popup);
    }
    private bool dropdown = false;
    decimal marketPrice;
    List<PriceModel> marketPriceList = new List<PriceModel>();
    decimal kompasPrice;
    private int adultsPicked = 1;

    IEnumerable<PriceModel> monthData;
    IEnumerable<PriceModel> monthMarketData;
    IEnumerable<PriceModel> monthKompasPrices;

    //Needs to be here, Can not be moved to Dashboard
    //As we can not call variables made in this scope.
    private async void OnClickUpdate(string s)
    {
        switch (s)
        {
            case "Next":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway++;
                Dashboard.CreateMonth();
                Dashboard.NextMonth();
                dropdown = false;
                break;
            case "Previous":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway--;
                Dashboard.CreateMonth();
                Dashboard.PreviousMonth();
                dropdown = false;
                break;
            case "update Hotel":
                marketPriceList.Clear();
                break;
        }
        monthData = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Select Prices", Dashboard.SelectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Kompas Prices");

    }

    protected override async Task OnInitializedAsync()
    {
        Dashboard.ListOfHotels = (await _db.LoadStaticHotelResources("total")).ToList(); 
        
        Program.ScoutSharedService.Scout.RunComparator("dashboard");

        foreach (BookingSite bookingSite in Program.ScoutSharedService.Scout.BookingSites)
        {
            bookingSite.DataScraper.SendMissingDataWarning += Dashboard.UpdateUiMissingDataWarning;
        }

        monthData = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Select Prices", Dashboard.SelectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Kompas Prices");

        Dashboard.CreateMonth();
    }
}