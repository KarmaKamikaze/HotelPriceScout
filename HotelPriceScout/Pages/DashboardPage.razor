@page "/Dashboard"
@using HotelPriceScout.Data.Interface
@using DataAccessLibrary
@using HotelPriceScout.Data.Model
@inject IDashboard Dashboard
@inject ISqliteDataAccess _db


<div class="row topLayer">
    <div class="col-md-12 d-inline-flex topLayer">
        <h1 id="H1MonthAndYear">@Dashboard.MonthName @Dashboard.Year</h1>
        @if (Dashboard.MonthsAway > 0)
        {
            <button type="button" class="btn btn-default btn-lg topLayer" @onclick='() => { OnClickUpdate("Previous"); }'>
                <span class="oi oi-arrow-thick-left" id="ArrowSize"></span>
            </button>
        }
        else
        {
            <button id="BtnDisable" type="button" class="btn btn-default btn-lg topLayer" disabled>
                <span class="oi oi-arrow-thick-left" id="ArrowSize"></span>
            </button>
        }
        @if (Dashboard.MonthsAway < 3)
        {
            <button type="button" class="btn btn-default btn-lg topLayer" @onclick='() => { OnClickUpdate("Next"); }'>
                <span class="oi oi-arrow-thick-right" id="ArrowSize"></span>
            </button>
        }
        else
        {
            <button id="BtnDisable" type="button" class="btn btn-default btn-lg topLayer" disabled>
                <span class="oi oi-arrow-thick-right" id="ArrowSize"></span>
            </button>
        }
        <div class="col-md-8 @(Dashboard.DetermineAnimation())">
            <h1 id="H1Date">@(Dashboard.DayClicked != 0 ? Dashboard.ShowCurrentDayAsString() : "")</h1>
        </div>
    </div>
</div>


<div class="row col-md-7 d-inline-flex topLayer">
    <div class="col-md-4">
        <select id="number-of-adults" class="form-control" @bind="adultsPicked" placeholder="1 adult" @onclick='() => OnClickUpdate("Update")'>
            <option value="1">1 adult</option>
            <option value="2">2 adults</option>
            <option value="4">4 adults</option>
            
        </select>
    </div>
    <div class="col-lg-6">

        <div class="dropdown">
            <button class="btn dropbtn" @onclick="()=>DropdownBool()">Select hotels <span id="arrow" class="@(Dropdown == true ? "oi oi-chevron-top" : "oi oi-chevron-bottom")"></span></button>
            <div class="dropdown-content @(Dropdown == true ? "ontop" : "d-none")">
                <div id="Boold" class="HotelOptions @(selectedHotels.Contains("All") ? "selected" : "")" @onclick='() => { SelectedHotelsChanged("All"); OnClickUpdate("update Hotel");}'>All</div>
                <div id="Boold" class="HotelOptions @(selectedHotels.Contains("Local") ? "selected" : "")" @onclick='() => { SelectedHotelsChanged("Local"); OnClickUpdate("update Hotel");}'>Local</div>
                <div id="Boold" class="HotelOptions @(selectedHotels.Contains("No budget") ? "selected" : "")" @onclick='() => { SelectedHotelsChanged("No budget"); OnClickUpdate("update Hotel");}'>No budget</div>
                @foreach (string hotel in listOfHotels)
                {
                    <div class="HotelOptions @(selectedHotels.Contains(hotel) ? "selected" : "")" @onclick='() => { SelectedHotelsChanged(hotel); OnClickUpdate("update Hotel");}'>@hotel</div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-8 ">
        <table class="table table-bordered table-sm col calendar shadow bg-white">
            <thead>
            <tr>
                <th id="Weekdays"> Monday</th>
                <th id="Weekdays"> Tuesday</th>
                <th id="Weekdays"> Wednesday</th>
                <th id="Weekdays"> Thursday</th>
                <th id="Weekdays"> Friday</th>
                <th id="Weekdays"> Saturday</th>
                <th id="Weekdays"> Sunday</th>
            </tr>
            </thead>
            <tbody>
            <tr class="rows">
                @for (int i = 0; i < Dashboard.NumDummyColumn - 1; i++)
                {
                    <td></td>
                }
                @for (int i = 1; i + Dashboard.NumDummyColumn - 1 <= 7; i++)
                {
                    int day = i;
                    DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                    marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                    marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                    kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                    <td class="@(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "") @(Dashboard.DetermineFocus(day))" id="HeightOfTdFirstRow"
                        @onclick="@(() => { Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                        <div id="DateAndArrow" style="@(marketPrice == 0 ? "opacity: 0.3;" : "")">
                            @i
                            <span class="@(marketPrice == 0 ? "d-none" : "") @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span>
                        </div>
                        <div class="@(marketPrice == 0 ? "d-none" : "")">
                            <div id="YouPrice" class="@(Dashboard.ChangeTextColorBasedOnMargin(marketPrice, kompasPrice))">
                                You: <span>@(decimal.ToInt32(kompasPrice)),-</span>
                            </div>
                            <div id="MarketPrice">
                                Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                            </div>
                        </div>
                    </td>
                }
            </tr>

            @for (int i = 8 - Dashboard.NumDummyColumn + 1; i <= Dashboard.MonthEnd.Day; i += 7)
            {
                <tr class="clik rows">
                    @for (int j = 0; j < 7; j++)
                    {
                        @if (i + j <= Dashboard.MonthEnd.Day)
                        {
                            int day = i + j;
                            DateTime dateConcatenated = new DateTime(Dashboard.Year, Dashboard.Month, day);
                            marketPrice = Dashboard.GetSingleDayMarketPrice(monthMarketData, day);
                            marketPriceList.Add(new PriceModel(marketPrice, dateConcatenated));
                            kompasPrice = Dashboard.GetSingleDayKompasPrice(monthKompasPrices, day);
                            <td class="@(Dashboard.ToDay.ToString("yyyy-MM-dd") == dateConcatenated.ToString("yyyy-MM-dd") ? "bg-warning" : "") @(Dashboard.DetermineFocus(day))" id="HeightOfTd"
                                @onclick="@(() => {Dashboard.ShowMoreInfo(day); marketPriceList.Clear(); })">
                                <div id="DateAndArrow" style="@(marketPrice == 0 ? "opacity: 0.3;" : "")">
                                    @(i + j)
                                    <span class="@(marketPrice == 0 ? "d-none" : "")
                                              @(Dashboard.ArrowDecider(marketPrice, kompasPrice))"></span>
                                </div>
                                <div class="@(marketPrice == 0 ? "d-none" : "")">
                                    <div id="YouPrice" class="@(Dashboard.ChangeTextColorBasedOnMargin(marketPrice, kompasPrice))">
                                        You: <span>@(decimal.ToInt32(kompasPrice)),-</span>
                                    </div>
                                    <div id="MarketPrice">
                                        Market: <span>@(decimal.ToInt32(marketPrice)),-</span>
                                    </div>
                                </div>
                            </td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>


    @if (Dashboard.DayClicked != 0)
    {
        Dashboard.GenerateThermometer(monthData, marketPriceList);
        marketPriceList.Clear();
        <div class="@(Dashboard.DetermineAnimation()) col-md-4 table-borderless bottomLayer">
            <div class="row col d-flex justify-content-center">
                @if (Dashboard.PriceList == null)
                {
                    <div>
                        <p>Loading data</p>
                    </div> // <--- checks if thermometer is ready yet
                }
                else
                {
                    <table class="table table-sm table-borderless noHover shadow bg-white">
                        @foreach (PriceModel item in Dashboard.PriceList)
                        {
                            if (item.Price <= Dashboard.MarketPriceItem.Price + Dashboard.CurrentMargin(Dashboard.MarketPriceItem.Price) &&
                                item.Price >= Dashboard.MarketPriceItem.Price - Dashboard.CurrentMargin(Dashboard.MarketPriceItem.Price))
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Gns. Marked" || item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-info text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price > Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="col table-danger text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else if (item.Price < Dashboard.MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-right @(item.HotelName == "Kompas Hotel Aalborg" ? "boldFont" : "")">
                                        @item.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-success text-center">@(decimal.ToInt32(item.Price)),-</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="col text-right">
                                        @Dashboard.MarketPriceItem.HotelName <span class="oi oi-arrow-right text-center"></span>
                                    </td>
                                    <td class="table-info">@(decimal.ToInt32(Dashboard.MarketPriceItem.Price)),-</td>
                                </tr>
                            }
                        }
                    </table>
                    Dashboard.TempAniDate = Dashboard.DayClicked;
                }
            </div>
        </div>
        thermometerIsOpen = true;
    }
    else
    {
        thermometerIsOpen = false;
    }
</div>



@if (Dashboard.BoolExceptionPopup)
{
    @foreach (var item in Dashboard.WarningMessage)
    {
        string[] ArrayOfWarnings = item.ListofWarnings.Split("|");
        <div @key="item" class="modal fade show d-block " id="@item"  role="dialog">
            <div class="modal-dialog modal-dialog-centered " role="document">
                <div class="modal-content shadow-lg">
                    <div class="modal-body"> <pre><span class="e-icons e-circle-info"></span>   <b>Warning!</b></pre>
                        <h6 class="modal-title boldFont" id="titleLabel">Data for the following hotels could not be collected from <b>@item.BookingSite</b>, please contact the system admin:</h6> 
                            @foreach( var s in ArrayOfWarnings ){<p>@s </p>}
                            <button @key="1" class="btn-remove col-6 offset-3" @onclick="() => RemoveCard(item)">Dismiss</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code
{

    private void RemoveCard(WarningMessage popup)
    {
        Dashboard.WarningMessage.Remove(popup);
    }
    public bool Dropdown = false;
    public bool thermometerIsOpen = false;
    decimal marketPrice;
    List<PriceModel> marketPriceList = new();
    decimal kompasPrice;
    private int adultsPicked = 1;
    private List<string> selectedHotels = new List<string>();
    private List<string> listOfHotels = new List<string>();

    public void DropdownBool()
    {
        Dropdown = !Dropdown;
    }

    List<string> localList = new List<string>()
    {
        "Cabinn Aalborg",
        "Slotshotellet Aalborg",
        "Kompas Hotel Aalborg"
    };

    List<string> noBudgetList = new List<string>()
    {
        "Slotshotellet Aalborg",
        "Kompas Hotel Aalborg",
        "Milling Hotel Aalborg",
        "Aalborg Airport Hotel",
        "Helnan Phønix Hotel",
        "Hotel Schellsminde",
        "Radisson Blu Limfjord Hotel Aalborg",
        "Comwell Hvide Hus Aalborg",
        "Scandic Aalborg Øst",
        "Scandic Aalborg City"
    };

    void SelectedHotelsChanged(string hotel)
    {
        if (selectedHotels.Contains(hotel))
        {
            switch (hotel)
            {
                case "All":
                    selectedHotels.Clear();
                    break;
                case "Local":
                    foreach (string hotelString in localList)
                    {
                        if (!selectedHotels.Contains("No budget") || hotelString == "Cabinn Aalborg")
                        {
                            selectedHotels.Remove(hotelString);
                        }
                    }
                    selectedHotels.Remove(hotel);
                    break;
                case "No budget":
                    foreach (string hotelString in noBudgetList)
                    {
                        if (!selectedHotels.Contains("Local") || (hotelString != "Slotshotellet Aalborg" && hotelString != "Kompas Hotel Aalborg"))
                        {
                            selectedHotels.Remove(hotelString);
                        }
                    }
                    selectedHotels.Remove(hotel);
                    break;
                case "Cabinn Aalborg":
                    {
                        if (!selectedHotels.Contains("Local") && !selectedHotels.Contains("All"))
                        {
                            selectedHotels.Remove(hotel);
                        }
                        break;
                    }
                case "Milling Hotel Aalborg" or "Aalborg Airport Hotel" or "Helnan Phønix Hotel" or "Hotel Schellsminde"
                    or "Radisson Blu Limfjord Hotel Aalborg" or "Comwell Hvide Hus Aalborg" 
                    or "Scandic Aalborg Øst" or "Scandic Aalborg City":
                    {
                        if (!selectedHotels.Contains("No budget") && !selectedHotels.Contains("All"))
                        {
                            selectedHotels.Remove(hotel);
                        }
                        break;
                    }
                case "Slotshotellet Aalborg" or "Kompas Hotel Aalborg":
                    {
                        if (!selectedHotels.Contains("No budget") && !selectedHotels.Contains("Local") && !selectedHotels.Contains("All"))
                        {
                            selectedHotels.Remove(hotel);
                        }
                        break;
                    }
                default:
                    if (!selectedHotels.Contains("All"))
                    {
                        selectedHotels.Remove(hotel);
                    }
                    break;
            }
        }
        else
        {
            switch (hotel)
            {
                case "All":
                    selectedHotels.Add(hotel);
                    foreach (string hotelString in listOfHotels)
                    {
                        selectedHotels.Add(hotelString);
                    }
                    break;
                case "Local":
                    if (!selectedHotels.Contains("All"))
                    {
                        selectedHotels.Add(hotel);
                        selectedHotels.Add("Cabinn Aalborg");
                        selectedHotels.Add("Slotshotellet Aalborg");
                        selectedHotels.Add("Kompas Hotel Aalborg");
                    }
                    break;
                case "No budget":
                    if (!selectedHotels.Contains("All"))
                    {
                        selectedHotels.Add(hotel);
                        selectedHotels.Add("Kompas Hotel Aalborg");
                        selectedHotels.Add("Slotshotellet Aalborg");
                        selectedHotels.Add("Milling Hotel Aalborg");
                        selectedHotels.Add("Aalborg Airport Hotel");
                        selectedHotels.Add("Helnan Phønix Hotel");
                        selectedHotels.Add("Hotel Schellsminde");
                        selectedHotels.Add("Radisson Blu Limfjord Hotel Aalborg");
                        selectedHotels.Add("Comwell Hvide Hus Aalborg");
                        selectedHotels.Add("Scandic Aalborg Øst");
                        selectedHotels.Add("Scandic Aalborg City");
                    }
                    break;
                default:
                    selectedHotels.Add(hotel);
                    break;
            }
        }

        int count = listOfHotels.Count(hotelString => selectedHotels.Contains(hotelString));
        if (count == listOfHotels.Count)
        {
            selectedHotels.Add("All");
        }

        //Change to list
        if (selectedHotels.Contains("Cabinn Aalborg") && selectedHotels.Contains("Slotshotellet Aalborg") && selectedHotels.Contains("Kompas Hotel Aalborg"))
        {
            selectedHotels.Add("Local");
        }
        
        //Add automatic nobudget add
        
        selectedHotels = selectedHotels.Distinct().ToList();
    }

    IEnumerable<PriceModel> monthData;
    IEnumerable<PriceModel> monthMarketData;
    IEnumerable<PriceModel> monthKompasPrices;

    //Needs to be here, Can not be moved to Dashboard
    //As we can not call variables made in this scope.
    private async void OnClickUpdate(string s)
    {
        switch (s)
        {
            case "Next":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway++;
                Dashboard.CreateMonth();
                Dashboard.NextMonth();
                Dropdown = false;
                break;
            case "Previous":
                Dashboard.DayClicked = 0;
                Dashboard.MonthsAway--;
                Dashboard.CreateMonth();
                Dashboard.PreviousMonth();
                Dropdown = false;
                break;
            case "update Hotel":
                marketPriceList.Clear();
                break;
        }
        monthData = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Select Prices", selectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Kompas Prices");

    }

    protected override async Task OnInitializedAsync()
    {
        listOfHotels = (await _db.LoadStaticHotelResources("total")).ToList(); //Loads list of hotels to the 

        Program.ScoutSharedService.Scout.RunComparator("dashboard");

        foreach (BookingSite bookingSite in Program.ScoutSharedService.Scout.BookingSites)
        {
            bookingSite.DataScraper.SendMissingDataWarning += Dashboard.UpdateUiMissingDataWarning;
        }

        monthData = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Select Prices", selectedHotels);
        monthMarketData = Program.ScoutSharedService.Scout.RunComparatorForSelectedHotels(Dashboard.ToDay.Date, Dashboard.LastDayOfMonth.Date, monthData);
        monthKompasPrices = await Dashboard.RetrieveSelectDataFromDb(adultsPicked, "Kompas Prices");

        Dashboard.CreateMonth();

    }
}