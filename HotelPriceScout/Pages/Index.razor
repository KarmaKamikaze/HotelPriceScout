@page "/"
@using HotelPriceScout.Data.Interface
@using DataAccessLibrary
@using HotelPriceScout.Data.Model
@inject Dashboard Dashboard
@inject SqliteDataAccess _db

<div class="row col-md-7">
    <h1 style="width:350px;">@Cal.MonthName @Cal.Year</h1>
    @if (Cal.MonthsAway > 0)
    {
        <button type="button" class="btn btn-default btn-lg" @onclick='() =>{OnClickUpdate("Previous");}'>
            <i class="bi bi-arrow-thick-left"></i>
            <span class="oi oi-arrow-thick-left"></span>
        </button>
    }
    else
    {
        <button id="BtnDisable" type="button" class="btn btn-default btn-lg" disabled>
            <i class="bi bi-arrow-thick-left"></i>
            <span class="oi oi-arrow-thick-left"></span>
        </button>
    }
    @if (Cal.MonthsAway < 3)
    {
        <button type="button" class="btn btn-default btn-lg" @onclick='() =>{OnClickUpdate("Next");}'>
            <i class="bi bi-arrow-thick-right"></i>
            <span class="oi oi-arrow-thick-right"></span>
        </button>
    }
    else
    {
        <button id="BtnDisable" type="button" class="btn btn-default btn-lg" disabled>
            <span class="oi oi-arrow-thick-right"></span>
        </button>
    }
</div>

<div class="row col-md-7">
    <div class="col-md-4">
        <SfDropDownList Width="200px" TItem="numberOfAdults" TValue="int" @bind-value="AdultsPicked" DataSource="@Adults">
            <DropDownListFieldSettings Text="Text" Value="Adults"></DropDownListFieldSettings>
            <DropDownListEvents TValue="int" TItem="numberOfAdults" ValueChange='() => {OnClickUpdate("Update");}'></DropDownListEvents>
        </SfDropDownList>
    </div>
    <div class="col-lg-6" style="padding:0;">
        <SfMultiSelect TValue="List<string>" @bind-Value="SelectedHotels" AllowFiltering="true" TItem="string" Mode="@VisualMode.CheckBox" Placeholder="Select hotels" DataSource="listOfSelectedHotels" ShowSelectAll="true"
                       EnableSelectionOrder="false" FilterBarPlaceholder="Search hotels" EnableGroupCheckBox="true" PopupHeight="350px">
            <MultiSelectEvents TValue="List<string>" TItem="string" ValueChange='() => { OnClickUpdate("update Hotel");}'></MultiSelectEvents>
        </SfMultiSelect>
    </div>
</div>

<div class="row">
    <div class="col-md-8">
        <table class="table table-bordered col">
            <thead>
                <tr>
                    <th style="width:14%"> Monday</th>
                    <th style="width:14%"> Tuesday</th>
                    <th style="width:14%"> Wednesday</th>
                    <th style="width:14%"> Thursday</th>
                    <th style="width:14%"> Friday</th>
                    <th style="width:14%"> Saturday</th>
                    <th style="width:14%"> Sunday</th>

                </tr>
            </thead>
            <tbody>
                <tr>
                    @for (int i = 0; i < Cal.NumDummyColumn - 1; i++)
                    {
                        <td></td>
                    }
                    @for (int i = 1; i + Cal.NumDummyColumn - 1 <= 7; i++)
                    {
                        int k = i;
                        string dateConcatenated = (Cal.Year.ToString() + "-" + Cal.Month.ToString() + "-" + k.ToString("00"));
                        <td class="@(Cal.ToDay.ToString("yyyy-MM-dd") == dateConcatenated ? "bg-warning" : "")" style="height:100px;" tabindex="0" @onclick="(()=>Cal.ShowMoreInfo(k))">
                            <div style="font-size: large; @(MarketPriceDaySetter(k) == 0 ? "opacity: 0.3;" : "")">@i</div>
                            <div class="@(MarketPriceDaySetter(k) == 0 ? "d-none" : "")">
                                <div style="text-align: right; font-size: small;" class="@(KompasPriceDaySetter(k))">You @KompasPrice </div>
                                <div style="text-align: right; font-size: small; opacity: 0.5;">
                                    Market @avgMarketPrice
                                </div>
                            </div>
                        </td>
                    }
                </tr>

                @for (int i = 8 - Cal.NumDummyColumn + 1; i <= Cal.MonthEnd.Day; i += 7)
                {
                    <tr class="clik">
                        @for (int j = 0; j < 7; j++)
                        {
                            @if (i + j <= Cal.MonthEnd.Day)
                            {
                                int k = i + j;
                                string dateConcatenated = (Cal.Year.ToString() + "-" + Cal.Month.ToString() + "-" + k.ToString("00"));
                                <td class="@(Cal.ToDay.ToString("yyyy-MM-dd") == dateConcatenated ? "bg-warning" : "")" style="height: 100px;" tabindex="0" @onclick="(() => Cal.ShowMoreInfo(k))">
                                    <div style="font-size: large; @(MarketPriceDaySetter(k) == 0 ? "opacity: 0.3;" : "")">@(i + j)</div>
                                    <div class="@(MarketPriceDaySetter(k) == 0 ? "d-none" : "")">
                                        <div style="text-align: right; font-size: small;" class="@(KompasPriceDaySetter(k))">
                                            You @KompasPrice
                                        </div>
                                        <div style="text-align: right; font-size: small; opacity: 0.5;">
                                            Market @avgMarketPrice
                                        </div>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (Cal.DayClicked != 0)
    {
        <div class="col-md-4 border">
            <h1 style="height:fit-content; text-align: center; padding-bottom:25px">@ShowCurrentDayAsString()</h1>
            <div class="row col">
                <!-- outer layer-->
                @if (priceList == null)
                {
                    <div><p>Loading data</p> </div>// <--- checks if thermometer is ready yet
                }
                else
                {
                    <table class="table table-borderless noHover">
                        @foreach (Prices item in priceList)
                        {
                            if (item.Price > MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-center">@item.Name<span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="@(priceList.First()==item ? "table-danger rounded-top":"table-danger")">@item.Price,-</td>
                                </tr>
                            }
                            else if (item.Price < MarketPriceItem.Price)
                            {
                                <tr>
                                    <td class="col text-center">@item.Name<span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="@(priceList.Last()==item ? "table-success rounded-bottom":"table-success")">@item.Price,-</td>
                                </tr>
                            }
                            else
                            {
                                <tr>
                                    <td class="col text-center"> @MarketPriceItem.Name<span class="oi oi-arrow-right text-center"></span></td>
                                    <td class="table-info">@MarketPriceItem.Price,-</td>
                                </tr>
                            }
                        }
                    </table>
                }
            </div>
        </div>}
</div>

@code
{
    int avgMarketPrice;
    int KompasPrice;
    public int AdultsPicked = 1;
    public List<string> SelectedHotels;

    public class numberOfAdults
    {
        public int Adults { get; set; }
        public string Text { get; set; }
    }

    public List<numberOfAdults> Adults = new List<numberOfAdults>()
{
            new numberOfAdults(){ Adults= 1, Text= "1 adult" },
            new numberOfAdults(){ Adults= 2, Text= "2 adults" },
            new numberOfAdults(){ Adults= 4, Text= "4 adults" },
    };

    Dashboard Cal = new Dashboard();
    IEnumerable<string> listOfHotels = Enumerable.Empty<string>();
    List<string> listOfSelectedHotels;

    List<Prices> priceList;
    Prices MarketPriceItem;
    IEnumerable<MarketPriceModel> CalendarMarketPrices;
    IEnumerable<MarketPriceModel> CalendarKompasPrices;

    private void GenerateThermometer()
    {   // This needs to get its data from the database, as a list of Price objects
        priceList = PriceMeterGenerator.PriceListGenerator();
        MarketPriceItem = (PriceMeterGenerator.MarketFinder(priceList));
        priceList.Sort();
    }

    public async void OnClickUpdate(string s)
    {
        if (s == "Next")
        {
            Cal.DayClicked = 0;
            Cal.MonthsAway++;
            Cal.CreateMonth();
            Cal.NextMonth();
        }
        else if (s == "Previous")
        {
            Cal.DayClicked = 0;
            Cal.MonthsAway--;
            Cal.CreateMonth();
            Cal.PreviousMonth();
        }
        else if (s == "update Hotel")
        {
            if (SelectedHotels != null)
            {
                CalendarMarketPrices = await Cal.DisplaySelectedComparedPrices(SelectedHotels, Cal.StartOfMonth.ToString("yyyy-MM-dd"),
                    Cal.LastDayOfMonth.ToString("yyyy-MM-dd"), AdultsPicked);
            }
        }
        if (SelectedHotels != null)
        {
            CalendarMarketPrices = await Cal.DisplaySelectedComparedPrices(SelectedHotels, Cal.StartOfMonth.ToString("yyyy-MM-dd"),
                Cal.LastDayOfMonth.ToString("yyyy-MM-dd"), AdultsPicked);
        }
        CalendarKompasPrices = await (Cal.DisplayKompasPrices(Cal.StartOfMonth.ToString("yyyy-MM-dd"),
            Cal.LastDayOfMonth.ToString("yyyy-MM-dd"), AdultsPicked));
    }

    protected override async Task OnInitializedAsync()
    {
        listOfHotels = await _db.LoadStaticHotelResources("total");
        listOfSelectedHotels = listOfHotels.ToList();
        listOfSelectedHotels.Add("Local");
        listOfSelectedHotels.Add("No budget");

        Scout scout = await Scout.CreateScoutAsync("preparing", 10, new DateTime[] { DateTime.Now });
        scout.RunComparator("dashboard");

        CalendarMarketPrices = await (Cal.DisplayComparedPrices(Cal.ToDay.ToString("yyyy-MM-dd"),
            Cal.LastDayOfMonth.ToString("yyyy-MM-dd"), AdultsPicked));
        CalendarKompasPrices = await (Cal.DisplayKompasPrices(Cal.ToDay.ToString("yyyy-MM-dd"),
            Cal.LastDayOfMonth.ToString("yyyy-MM-dd"), AdultsPicked));

        Cal.CreateMonth();
        GenerateThermometer();
    }

    public int KompasPriceDaySetter(int k)
    {
        //The time is set to 23:59:59 to ensure that no matter the time of loading the data, the current day will be correct
        if (new DateTime(Cal.Year, Cal.Month, k, 23, 59, 59) >= Cal.ToDay &&
            new DateTime(Cal.Year, Cal.Month, k) <= Cal.ToDay.AddMonths(3))
        {
            IEnumerable<MarketPriceModel> SingleMarketPrice = CalendarKompasPrices
             .Where(date => date.Date == new DateTime(Cal.Year, Cal.Month, k));
            KompasPrice = Decimal.ToInt32(SingleMarketPrice.Single().Price);
        }
        else { KompasPrice = 0; }
        return KompasPrice;
    }

    public int MarketPriceDaySetter(int k)
    {
        //The time is set to 23:59:59 to ensure that no matter the time of loading the data, the current day will be correct
        if (new DateTime(Cal.Year, Cal.Month, k, 23, 59, 59) >= Cal.ToDay &&
            new DateTime(Cal.Year, Cal.Month, k) <= Cal.ToDay.AddMonths(3))
        {
            List<int> Listofprices = new();
            IEnumerable<MarketPriceModel> listOfDayPrice = CalendarMarketPrices
            .Where(date => date.Date == new DateTime(Cal.Year, Cal.Month, k));

            foreach(var MarketPriceModel in listOfDayPrice)
            {
                Listofprices.Add(Decimal.ToInt32(MarketPriceModel.Price));
            }
            avgMarketPrice = (int)Listofprices.Average();
        }
        else { avgMarketPrice = 0; }
        return avgMarketPrice;
    }

    public string ShowCurrentDayAsString()
    {
        return Cal.DayClicked.ToString("") + ". " + Cal.MonthName + " " + Cal.Year.ToString("");
    }
}