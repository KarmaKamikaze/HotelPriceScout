@page "/settings"
@using HotelPriceScout.Data.Interface
@using HotelPriceScout.Data.Model
@inherits SettingsManager
@inject Scout _scout;


<h1>Settings</h1>
<br />
<label>Margin value percent</label>
<br />
<SfNumericTextBox Width="200px" TValue="int" Step="1" Max="100" Min="1" @bind-Value="marginPicked"></SfNumericTextBox>
<br />&nbsp;
<br />
<br />&nbsp;
<br />

<label>Amount of notifications</label>
<br />
<SfDropDownList Width="200px" TItem="NotificationAmount" TValue="int" @bind-value="notificationAmountPicked" DataSource="@Notifications">
    <DropDownListFieldSettings Text="Text" Value="Notification"></DropDownListFieldSettings>
</SfDropDownList>

<br />&nbsp;
<br />
<br />&nbsp;
<br />

<label>Notification time(s)</label>
<br />
<SfTimePicker Width="200px" TValue="DateTime "@bind-Value="@timeValue" Step=30 Format="HH:mm"></SfTimePicker>


@if (notificationAmountPicked == 2)
{
    <SfTimePicker Width="200px" TValue="DateTime" @bind-Value="@timeValue2" Step=30 Format="HH:mm"></SfTimePicker>
}

@if (notificationAmountPicked == 3)
{
    <SfTimePicker Width="200px" TValue="DateTime" @bind-Value="@timeValue2" Step=30 Format="HH:mm"></SfTimePicker>
    <SfTimePicker Width="200px" TValue="DateTime" @bind-Value="@timeValue3" Step=60 Format="HH:mm"></SfTimePicker>
}
<br />&nbsp;
<br />

<div class="row">
    @if (showStart)
    {
        <button type="button" class="border border-dark col-md-1 btn btn-success" disabled=@isScoutStarted @onclick="StartProgram"> Start program</button>
    }
    @if (modalStart)
    {
        <div class="modal fade show d-block" id="Modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <h4 class="modal-title" id="titleLabel">Settings have been set and the program has started!</h4>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (showStop)
    {
        <button type="button" class="border border-dark col-md-1 btn btn-danger" data-bs-toggle="modal" @onkeydown="@EscapeStop" @onclick="PopUp"> Stop program</button>
    }
    @if (popUp)
    {
        <div class="modal fade show d-block" id="Modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="titleLabel">Are you sure you want to stop the program?</h5>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="form-control border border-dark" disabled=@isScoutStopped @onclick="StopProgram">Yes </button>
                        <button type="button" class="form-control border border-dark" disabled=@isScoutStopped @onclick="PopUp"> No </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="col-md-1">
    </div>
    @if (showUpdate)
    {
        <button type="button" class="border border-dark col-md-1 btn btn-primary" data-bs-toggle="modal" @onkeydown="@EscapeUpdate" @onclick="UpdatePopUp">Update program</button>
    }
    @if (updatePopUp)
    {
        <div class="modal fade show d-block" id="Modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="titleLabel">Are you sure you want to update the program?</h5>
                    </div>
                    <div class=modal-footer>
                        <button type="button" class="form-control border border-dark" col-8 col-sm-3 disabled=@isScoutUpdated @onclick="UpdateProgram">Yes</button>
                        <button type="button" class="form-control border border-dark" col-4 col-sm-3 disabled=@isScoutUpdated @onclick="UpdatePopUp">No</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @if (updateYes)
    {
        <div class="modal fade show d-block" id="Modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <h2 class="modal-title" id="titleLabel">The program has been updated!</h2>
                    </div>
                </div>
            </div>
        </div>
    }
    <div class=col-md-3>
    </div>
</div>


@code {

    public class NotificationAmount
    {
        public int Notification { get; set; }
        public string Text { get; set; }
    }
    public List<NotificationAmount> Notifications = new List<NotificationAmount>()
    {
        new NotificationAmount(){ Notification= 0, Text= "0" },
        new NotificationAmount(){ Notification= 1, Text= "1" },
        new NotificationAmount(){ Notification= 2, Text= "2" },
        new NotificationAmount(){ Notification= 3, Text= "3" },
    };

    public void StopProgram()
    {
        isScoutStopped = true;
        ShowStartButton();
        ShowStopButton();
        ShowUpdateButton();
        PopUp();
        marginPickedPass = default;
        notificationPickedPass = default;
        timeValuePass = default;
        timeValuePass2 = default;
        timeValuePass3 = default;
        isScoutStarted = false;
        marginPicked = 1;
        notificationAmountPicked = 1;
        StateHasChanged();
    }


    async void UpdateProgram()
    {
        isScoutUpdated = true;
        await OnButtonClick();
        updateYes = true;
        UpdatePopUp();
        StateHasChanged();
        marginPickedPass = marginPicked;
        notificationPickedPass = notificationAmountPicked;
        timeValuePass = timeValue;
        timeValuePass2 = timeValue2;
        timeValuePass3 = timeValue3;
        isScoutUpdated = false;
        await Task.Delay(1500);
        updateYes = false;
        StateHasChanged();
    }

    public async void StartProgram()
    {
        marginPickedPass = marginPicked;
        notificationPickedPass = notificationAmountPicked;
        timeValuePass = timeValue;
        timeValuePass2 = timeValue2;
        timeValuePass3 = timeValue3;
        modalStart = true;
        isScoutStarted = true;
        ShowStopButton();
        ShowUpdateButton();
        ShowStartButton();
        isScoutStopped = false;
        await Task.Delay(2000);
        modalStart = false;
        StateHasChanged();
        ScoutStart(marginPickedPass, GetNotificationTimes());
    }

    Task OnButtonClick()
    {
        return Task.Delay(1000);
    }


    public void EscapeUpdate(KeyboardEventArgs e)
    {
        if (e.Code == "Escape")
        {
            UpdatePopUp();
        }
    }

    public void EscapeStop(KeyboardEventArgs f)
    {
        if (f.Code == "Escape")
        {
            PopUp();
        }
    }

    private async void ScoutStart(int margin, IEnumerable<DateTime> dates)
    {
        _scout = await Scout.CreateScoutAsync("preparing", margin, dates);
        _scout.StartScout();
    }

}